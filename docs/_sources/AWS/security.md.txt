# セキュリティ
## IAM


## Cognito
Web-AppやMobile-Appに対してAPIベースで認証機能を提供するサービス
### ユーザープール
ユーザーDBに相当するが、AWSがマネージドで管理してくれる。

#### ユースケース
ざっくり分けると３つのユースケースに分類可能。Appへの認証、IDプールと連携してAWSサービスへのアクセス、CognitoからLambdaのキック。
- EC2やECS常に配置したWeb-AppやMobile-Appの認証：アプリケーションへの認証をする
- API GWやALBからのオーソライザ：Tokenの認証をしてIDプールと連携して他のサービスと連携する
- Lambdaを使ったオーソライザ：CognitoがLambdaを使って、サインインのワークフロをカスタマイズする

#### 具体的な利用方法
まず、ユーザーディレクトリを定義して、サインアップ方法やパスワードポリシーを設定する。  
アプリクライアント側（認証を求めてくるクライアント）によって、推奨される認証フローが異なる点に注意

#### ユーザープールとアプリケーションの統合
Cognitoでは、OIDCの標準に準拠したエンドポイントが提供されている。
そのため、アプリへのリクエストに対して、Cognitoのエンドポイントにリダイレクトすることで認証・認可をCognitoに任せることができる。
Cognitoで認証してクライアント側にTokenを付与することで、Cognitoと連携するアプリへの一元的なアクセスができるようになる（シングルサインオン）

Cognitoへの認証を外部フェデレーテッドIDプロバイダと連携して任せることができる。
具体的なIDプロバイダとしてはGoogle ,Amazon ,Facebook ,Apple ,SAML, OpenIDConnectプロバイダが挙げられる。

### IDプール
ユーザープールや外部フェデレーションで認証したユーザーに対してAWSサービスを認可する機能を提供
1. ユーザープールで認証される
2. JWTがクライアントに提供される
3. クライアントがIDプールにTokenを渡す
4. IDプールがTokenの検証をする
5. Tokenが正しければ、STSに認証情報をもらう
6. クライアントが所望のサービスにアクセスする

### JWT
`署名付きの認証情報を含むToken`

署名がJWTの発行元の秘密鍵で暗号化されているため、公開鍵で復号化するだけで署名を検証することができる点が有用

ただし、期限付きの合鍵となるので奪取されることは避けなくてはいけないので取り扱いに注意が必要。
