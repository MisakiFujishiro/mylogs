# DataBase
## データベースの種類
CAPの定理に従ってDBを分類すると効果的

CAPの定理：「広域な環境で分散してデータを保存する場合以下の３つの特性のうち、２つまでしか同時に満たすことができない」
- C(一貫性)：あるデータを読み込みした時にすべてのノードで最新のものを返す
- A(可用性)：システムを構成するノードに障害が発生しても常に読み込み書き込みができる
- P(ネットワーク分断体制)：システムを構成するノード間の通信が分断されても機能が継続される

![](img/db_cap.png)

CAPの定理から各DBサービスをCA型、AP型、CP型に分類することができ、それぞれ代表的なRDS・DynamoDB・Elastic Cacheについて説明する。

[川畑塾長の記事](https://debugroom.github.io/mynavi-doc-draft/cloud_native/aws-nosql-1-1.html)

### CA型
データの一貫性と可用性を高める構成で構成で、RDBが相当する  
複雑な検索や厳密なトランザクションに対応できる。

複数のAZに分散して、DBを構成して、同期をとることで一貫性と可用性を満たそうとする。
ネットワークが分散されると一貫性と可用性が満たせなくなる。

![](img/db_ca.png)


### CP型
一貫性とネットワーク分断耐性を高める構成で、MongoDBやElastic CacheのRedisが該当する  
高速処理が可能

データを複数のAZに分けて保存するシャーディングを利用している。
シャーディングでは、１つのノードが機能しなくても、そのノードに配置されたデータが利用できなくなるが、DB全体が利用できなくなることはない。
ただし、ノードが増えることで故障確率が上昇し、読み込みと書き込みが制限される可能性がある。

![](img/db_cp.png)

### AP型
可用性とネットワーク分断耐性を高める構成で、DynamoDBが該当する  
障害が発生しないことを利用した多数アプリやIoTからのアクセスなどへの対応が可能。

複数のAZにDBを配置し、全体で1つのDBとして動作する。
1つのノードやネットワークに障害が起きてもデータが損なわれないように各ノードにデータを分散して配置する。
単一障害点がないので、どのノードからでもデータ更新の可能性がある。
ノードの故障や通信エラーにより、複数ノード間で生合成が取れない場合がある。
整合性が取れない場合に備えて、Read Repair機能やQuorum(多数決)などの機能が準備されている。

![](img/db_ap.png)







## RDS
構築や運用を容易にするRDBサービスで、CA型のデータベースサービスとなる  
以下のエンジンがサポートされている
- MySQL
- PostgreSQL
- MariaDB
- SQL Server
- Oracle Database
- Aurora

### RDSの特徴
マネージドなサービスであり、アプリケーション最適化以外の部分についてはAWSが管理しており、以下の特徴を持つ。
#### 拡張性
スケールアップやスケールダウンをインスタンスタイプを指定することで容易に実行可能。
ストレージについてもDBを停止することなく、増加させることができる。

#### 高可用性
稼働中のシステムがダウンした際に、待機系のシステムに自動で切り替える`自動フェイルオーバー`や、DBの構築時に`Multi-AZ配置`にすることができる。

#### DBバックアップ
`自動バックアップ機能`が準備されており、次の２つのデータをS3に保存する
- 1日1回、バックアップウィンドウで指定した時間のスナップショット
- 5分感覚のトランザクション

#### パッチ適用
DBやOSのパッチは自動で行われる

### リードレプリカ
パフォーマンス向上のために、プライマリとなるDBを非同期で複製する機能。

最大で5台のリードレプリカを作成して、負荷分散することができるが、非同期であるので、常に最新のデータが返却去るとは限らない点に注意
また、エンドポイントもプライマリと異なっているので、アプリ側で書き込みと読み込みで異なるエンドポイントを指定する必要がある。

災害対策でベルのリージョンにリードレプリカを作成することができる。








## Aurora
RDSのデータベースエンジンの一つで、クラウドの普及に伴ってAmazonが内部のアーキテクチャを再設計したデータベース
MySQLとPostgreSQL互換のバージョンが提供されている。

RDBの特性である一貫性をもち、リードレプリカといった特徴とQuorumに基づく結果整合性でデータを分散して保存しているため可用性を高めている。
あるAZで障害が発生した場合にも、マルチAZでのスタンバイベースを作成していなくても、DBを継続して利用することができる。

書き込み用のクラスターエンドポイントと読み込み用の読み込みエンドポイントがある。
![](img/db_aurora_endpoint.png)

### Aurora Serverless
DBサーバーをプロ美女人戯して管理するのではなくて、キャパシティユニットを指定して管理する。
不定期、断続的、予測不可能なワークロードに対して効率良く利用することができる。





## Elastic Cache
AWSが提供するセットアップ、運用、拡張が良いなマネージドキャッシュサービス

RDBに保存してある、マスターデータをキャッシュして、処理を高速化したり、複数Appサーバーでセッション情報を共有するために利用される。

### Memcached
マルチスレッドでアクセス可能な共通データのキャッシュ用途で利用する  
インメモリ型のキーバリューストアで、シンプルなキーバリューストアでデータをキャッシュして低レイテンシーでデータ参照するためといった目的で利用する。

### 基本的な挙動
1. 複数AZに跨った、クラスターを構成する
2. データはハッシュアルゴリズムに従って格納するデータが決まる
3. App側はElastic Cache Clientを利用して、データが格納されているノードをMemcachedのエンドポイントに問い合わせる
4. キャッシュにデータがあればデータを取得する

※Elastic Cache Clientが提供されているのが、C#,Java,PHPなので、それ以外はApp側で問い合わせ先のノードを計算する必要がある。



### Redis
データをいくつかのグループで分割して持つシャードを利用して分散処理して、パフォーマンスや可用性を高める  
高機能なインメモリ型のキーバリューストアで、CP型のデータベースとなる。

Redisの構成と用語は以下の通り
- `ノード`：データを保持する単位
- `シャード`：ノードの集合体
- `クラスタ`：シャードの集合体

Redisでは、シャードにデータを分散保存（シャーディング）することでパフォーマンスと可用性を高めている。
シャーディングを利用するか否かをクラスターモードの設定が可能。

#### クラスタモード無効
クラスターモードが無効だとシャードが１つとなる。
エンドポイントは書き込みと読み取り用途のエンドポイントが提供される。

データを保存しているプライマリノードとリードレプリカを配置して、負荷分散をする。
プライマリノードとリードレプリカの同期は非同期に行われている

障害時は、リードレプリカがプライマリーに昇格する。

![](img/db_elasticcache_wo_cluster.png)

#### クラスタモード有効
キャッシュデータ量が多ければ、クラスターモードを有効化することを考えた方が良い。

クラスターモードが有効だとシャードは1-15で設定可能。エンドポイントは設定エンドポイントのみが提供される。
キーのハッシュ値（スロット）に応じてシャーディングし、シャードを跨いでプライマリとリードレプリカについても作成する。

![](img/db_elasticcache_with_cluster.png)







## Dynamo DB
AP型のデータベースの代表例で、クラウドならではの水平スケーラビリティに優れており、大規模分散処理構成のユースケースが得意  
水平スケーラビリティとは、リソースの数を増やして、システム全体のパフォーマンスを高める手法で、性能向上は垂直スケーラビリティと呼ぶ。

リージョン単位でDBが構成され、3箇所の異なるAZにデータがレプリケーションされる。
単一障害点がないのが特徴。

DynamoDBはNoSQLデータベースサービスで、項目・属性の定義が不要なスキーマレスのテーブル構成。
格納するデータの属性が項目ごとに異なって問題ないなどかなり自由度高くデータを格納できる。

![](img/db_dynamo_table.png)


### データとキー
DynamoDBではConsistent Hashingというアルゴリズムに基づいて、親キー（`パーティションキー`）をハッシュ化して、配置するノード決定する。
さらに、ノード内での順序は子キー（`ソートキー`）が決めることができるが、ソートキーの設定は任意

#### ローカルセカンダリインデックス(LSI)
Sort kye以外に絞り込み検索を行うkeyを持つことができる。
Partition keyが同一で他のAttributesで検索をすることができる。

![](img/db_dynamo_lsi.png)
LSIを設定しておくことで、A1をPrimary key、A3をSort kyeとしたテーブルを作成し、検索することが可能となる。


#### グローバルセカンダリインデックス(GSI)
Prrtition key属性の代わりとなるkeyを指定することができる。

![](img/db_dynamo_gsi.png)
GSIを設定しておくことで、A2をPrimary Keyとしてテーブルを作成することができる。


### DynamoDBの注意点
RDBでは当然のようにできていたことができない。
テーブル間の結合や不軸問い合わせができないことやAND飲みが論理演算子で利用可能など・・・
Dynamoにはできないことをきちんと把握してから利用する必要がある。

### 課金体系
DynamoDBの課金体系には以下の２つがある
- オンデマンドキャパシティモード：リクエスト数に応じて課金
- プロビジョンモード：テーブル単位で読み書きのパフォーマンスをスループットとして定義する。

読み込みと書き込みのキャパシティユニットをそれぞれWCUs(Write Capacity Units)とRCUs（Read Capacity Units)と呼ぶ。

#### RCUs
> 1秒当たりの読み込み項目数 * 項目サイズ(4KBまでを1ブロック)

- 結果整合性読み込みは雑に読み込むのでスループット2倍
- トランザクション読み込みはしっかり読み込むのでスループット半減

#### WCUs
> 1秒当たりの書き込み項目数 ＊ 項目サイズ（1KBまでを１ブロック）

- トランザクション書き込み（強い整合性）の場合はしっかり書き込むのでスループット半分


### TTL(Time To Line)
項目に対して有効期限を設定することができ、指定されたタイムスタンプの日時にWCUsを利用せずに削除することができる。

### DAX(DynamoDB Accelarator)
VPC内でキャッシュクラスタを構築して、DynamoDBへの高速アクセスを可能とするキャッシュサービス。

リアルタイム入札やソーシャルゲームなどのユースケースに適している。

### DynamoDB Stream/Trigger
テーブル内で項目の変更に関するデータを記録する機能

データが作成・更新・削除されたときに項目のPKと変更前後のセータがストリームレコードとして書き込まれる。

![](img/db_dynamo_streams.png)

LambdaやKinesisと統合されており、StreamAPIを使って、ポーリングを行なって変更を検知すると処理を実行できる（DynamoDB Trigger)
