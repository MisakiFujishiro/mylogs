# java spring
## MVCとは
アプリケーションフレームワークの一つ。アプリケーションの処理を Model/View/Controllerの３つに分ける。
### Model
データやDBへのアクセスなどを担う

### View
クライアントからの入力やクライアントへの出力などを担う

### Controller
ModelとViewをつなぐ。
Viewが受け取るクライアントからの入力をModelへ渡して処理を行い、Viewへ処理内容を連携する。

## Springとは
MVCの考え方からSpring MVCという考え方が生まれる。
SpringMVCはライブラリなどが多くて、扱いが難しかった。
SpringMVCを使いやすくしたフレームワークとしてSpringBootが生まれた。

### DI（依存性の注入とは）
クラス間にある依存関係をコードに書くのではなくて、実行時に解決していく。
クラス間の依存度を低くしてくれる。  
[参考](https://engineering.linecorp.com/ja/blog/spring-boot-job-report/)

## pomとは
Project Object Modelの略  
プロジェクトのビルド内容を設定するファイル

### 基本設定項目

ルートノードで、POMのバージョン指定や読み込み、XMLスキーマの指定
```
<project xmlns="http://maven.apache.org/POM/4.0.0" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
```

Mavenモデルのバージョン指定
```
  <modelVersion>4.0.0</modelVersion>
```

プロジェクトの情報
```
  <groupId>com.TEST.PJ</groupId> #プロジェクトの開発者ID
  <artifactId>TESTPJ-APP</artifactId> #プロジェクトのID
  <version>0.0.1-SNAPSHOT</version> # プロジェクトのバージョン
  <packaging>jar</packaging> # パッケージ化する場合の種別
  <name>TEST-app</name> # アプリケーション名（自由）
  <url>http://maven.apache.org</url> # プロジェクトのWebサイト
 ```

pomで利用される属性
```
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
```



### 依存するライブラリの設定項目
このプログラムがどのプログラムに依存しているかの記述を行う
```
  <dependencies>
    <dependency>
      <groupId>junit</groupId>  # 必須：依存するグループID
      <artifactId>junit</artifactId># 必須：依存するアーティファクトID
      <version>3.8.1</version>　# 任意：指定しないと最新版
      <scope>test</scope> # テストの場合にのみ指定
    </dependency>
  </dependencies>
```

## アノテーション整理
### @Controller
SpringBootにおいてControllerのクラスであることを認識させる
#### @RequestMappng
クライアントからのリクエストに対して、メソッドなどの対応付ができる  
`return`で返却されるStringはViewResolverでファイル名に変換されてクライアントに返却される。

### @Service
ServiceImplに記述する。Serviceであることを認識させる。
DIの対象(bean)となり、DIコンテナに登録される

### @Repository
RepositoryImplに記述する。 Repositoryであることを認識させる。

### @Override
親クラスのメソッドをオーバーライドするときに記述する。
オーバーライドするつもりでできていない。していないつもりでしていたというミスを防げる。

### @inject


### @Transactional
トランザクション管理が行われる。
メソッド開始時と正常終了時にコミットが行われ、例外時にはロールバックされる。





## References
- [MVCとSpring・コントローラーのアノテーション](https://qiita.com/TEBASAKI/items/267c261db17f178e33eb)