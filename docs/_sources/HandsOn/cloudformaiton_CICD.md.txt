# CodePipelineを利用してCFNのCICD環境を作成する

## デプロイステージについて
デプロイステージとして以下2つの選択肢がある
- CloudFormation
- CloudFormation スタックセット

CloudFormationのスタックセットは、別リージョンや複数のAWSアカウントにデプロイする機能なので、今回はCloudFormationを利用することになるはず

### CloudFormationの設定項目：アクションモード
アクションモードとして以下が選択できる
- スタックを作成または更新する  
    新規のスタックを作成するか、すでにスタックがあれば、更新を行う。  
- スタックを削除する  
    指定されたCFNスタックを削除する  
- 故障したスタックを取り替える  
    指定されたCFNスタックが故障した場合、新しいスタックを作成して置き換える      
- 変更セットを作成または更新する  
    指定されたCFNスタックに対する変更セットを作成、更新する  
    このアクションにより、変更をスタックに反映する前に、変更の影響を予測し、評価するために使用される。
- 変更セットを実行する  
    指定されたCFNスタックに対する変更セットを実行する  
    変更を実際に反映するためのアクション

### CloudFormationの設定項目：スタック名
設定項目は以下
- スタック名  
    作成する場合は作成されるスタック名を意味する
    更新する場合は更新対象のスタックを意味する
- テンプレート



### CloudFormationの設定項目：権限
AWS CloudFormationがスタックを作成するために、スタックテンプレートに特定の機能が含まれていることを明示的に確認する必要があり、その設定を行う。
CloudFormationを使用するにはIAMユーザーやロールに必要な権限を付与する必要がある。
アクションに必要な権限は”能力(CAPABILITY)”というパラメータで付与する

設定項目は以下
- CAPABILITY_IAM  
    CFNがIAMリソースを作成・変更できるようにする
- CAPABILITY_NAMED_IAM  
    CFNが指定されたIAMリソースを作成または、変更できるようにする（作成するスタックの中にカスタム名のIAMリソースを含めることができる）
- CAPABILITY_AUTO_EXPAND   
    CFNがテンプレート内で、複数のネストされたAppが含まれる場合に指定するらしい




## チュートリアルをやってみる
[テストおよび本稼働スタック用のパイプラインを構築する](https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-basic-walkthrough.html)をやってみる


最終的に3つのステージが完成する
1. リポジトリからソースアーティファクトを取得して、S3バケットにアップロードする
2. テストスタックを作成して、実行か追加変更かを選べる。承認プロセスも含む
3. 本番スタックに対するへこうセットを作成して、承認を待ち、承認後に変更が実行される